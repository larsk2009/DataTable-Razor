@typeparam T

@using System
@using System.Linq
@using System.Linq.Dynamic.Core
@using Microsoft.AspNetCore.Components

<div class="btn-toolbar justify-content-between">
    <div class="btn-group">
        @ButtonGroup
    </div>

    <div class="input-group">
        <div class="input-group-prepend">
            <button id="visiblityDrop" type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Columns
            </button>
            <div class="dropdown-menu" aria-labelledby="visiblityDrop">
                @foreach (var column in Columns)
                {
                    string classes = "dropdown-item";
                    if (VisibleColumns.Contains(column.Value))
                    {
                        classes += " active";
                    }
                    <a class="@classes" href="javascript:void(0)" @onclick="(() => VisiblityClicked(column.Value))">@column.Value</a>
                }
            </div>
        </div>
        <div class="input-group-prepend">
            <span class="input-group-text oi oi-magnifying-glass" style="top: 0;"></span>
        </div>
        <input @onchange="@(e => SearchTable(e.Value.ToString()))" oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" type="text" class="form-control" placeholder="search" />
    </div>

</div>
<div class="overflow-auto">
<table class="table table-hover">
    <thead>
        <tr>
            @* Render extra header when selectable rows will be used *@
            @if (SelectableRows)
            {
                <th></th>
            }
            @foreach (var column in Columns)
            {
                string columnName = column.Value;
                string fieldName = column.Key;

                if (!VisibleColumns.Contains(columnName))
                {
                    continue;
                }

                string classes;
                if (LastSortColumn == fieldName)
                {
                    if (SortAsc)
                    {
                        classes = ColumnClassTop;
                    }
                    else
                    {
                        classes = ColumnClassBottom;
                    }
                }
                else
                {
                    classes = ColumnClassDefault;
                }
                <th style="cursor: pointer; user-select:none;" @onclick="@(() => SortList(fieldName))">@columnName<span style="margin-left: 10px;" class="@classes"></span></th>
            }
            @* Render extra header if necessary for last column render fragment *@
            @if (LastColumnTemplate != null)
            {
                <th style="user-select:none;"></th>
            }
        </tr>
    </thead>
    <tbody>
        @*foreach (var item in localItems)*@
        @foreach(var dictionaryItem in localItemsDictionary)
        {
            var key = dictionaryItem.Key;
            var value = dictionaryItem.Value;
            var item = dictionaryItem.Value;
            if (RowTemplate == null)
            {
                var type = item.GetType();
                var propertyNames = type.GetProperties().Select(property => property.Name).ToList();
                <tr style="cursor: pointer" @onclick="@(() => RowClicked(dictionaryItem))">
                    @if (SelectableRows)
                    {
                        <td><input type="checkbox" checked="@(SelectedKeys.Contains(key))"/></td>
                    }

                    @foreach (var column in Columns)
                    {
                        if (!VisibleColumns.Contains(column.Value))
                        {
                            continue;
                        }
                        if (propertyNames.Contains(column.Key))
                        {
                            var propertyValue = type?.GetProperty(column.Key)?.GetValue(item, null);

                            if (propertyValue is bool boolValue)
                            {
                                <td><input type="checkbox" disabled @bind="boolValue" /></td>
                            }
                            else if (propertyValue is DateTime datetimeValue)
                            {
                                <td>@datetimeValue.ToString("dd-MM-yyyy")</td>
                            }
                            else
                            {
                                <td>@propertyValue?.ToString()</td>
                            }
                        }
                    }
                    @if (LastColumnTemplate != null)
                    {
                        <td>
                            @LastColumnTemplate(item)
                        </td>
                    }
                </tr>
            }
            else
            {
                <tr>
                    @RowTemplate(item)
                </tr>
            }
        }
    </tbody>
    @if (ShowTotals)
    {
        <tfoot>
            @if (Items.Count == localItemsDictionary.Count)
            {
                <tr>Total: @Items.Count</tr>
            } else
            {
                <tr>Total: @localItemsDictionary.Count of @Items.Count</tr>
            }
        </tfoot>
    }
</table>
</div>